FORMAT: 1A
HOST: https://www.terkan.me/api

# Terkan

Terkan API first draft.

* <...> signs denote variables.
* Movies and TV shows are sent in these formats:
https://developers.themoviedb.org/3/movies/get-movie-details
https://developers.themoviedb.org/3/tv/get-tv-details

# Data Structures

## User

+ id (number)
+ name (string)
+ pic (string)

# Group Users

Users API

## User [/users/{id}]

Get a user's profile by id.

+ Parameters
    + id: 1 (required, number) - ID of the user

### Get user by id [GET]

+ Response 200 (application/json)

        {
            "data": {
                "id": 1,
                "name": "derebaba",
                "pic": "image_url",
                'followersCount': 3,
                'followingUserCount': 6,
                'followingTvCount': 10,
                'watchlistCount': 11,
            }
        }

### Update user's name [PATCH]

+ Request (application/x-www-form-urlencoded)

    + Body

            { 
                "name" : "derebabuş", 
            }

    + Headers

                Authorization: Bearer {access_token}

    + Attributes
        + name (string) - User's new name

+ Response 204

## Logged-in user [/user]

A user can get his own details by token.

### Get user's details by token [GET]

+ Request (application/x-www-form-urlencoded)

    + Headers

                    Authorization: Bearer <access_token>

+ Response 200 (application/json)

        {
            "success": true,
            "data": {
                "id": 60,
                "name": "derebabo",
                "email": "example@example.com",
                "password": "<hashed_password>",
                "pic": "<image_url>",
                "verified": 1,
                "email_token": "<email_token>",
                "created_at": "2018-04-17 10:14:54",
                "updated_at": "2018-04-22 18:50:15",
                "provider_id": "<string>",
                "provider": "facebook",
                "provider_name": "<facebookName>"
            },
            "message": "success"
        }

## Follow/Unfollow another user [/users/{id}/follow]

+ Parameters
    + id: 15 (required, number) - ID of the user to follow

### Follow user [POST]

+ Request (application/x-www-form-urlencoded)

    + Headers

                    Authorization: Bearer <access_token>
+ Response 204

+ Response 409 (application/json)

    + Body

                {
                    "success": false,
                    "message": "You are already following this user."
                }

### Unfollow user [DELETE]

+ Request (application/x-www-form-urlencoded)

    + Headers

                    Authorization: Bearer <access_token>
+ Response 204

## Follow/Unfollow a TV show [/tvs/{id}/follow]

+ Parameters
    + id: 15 (required, number) - ID of the TV show

### Follow TV [POST]

+ Request (application/x-www-form-urlencoded)

    + Headers

                    Authorization: Bearer <access_token>
+ Response 204

+ Response 409 (application/json)

    + Body

                {
                    "success": false,
                    "message": "User is already following this show."
                }

### Unfollow TV [DELETE]

+ Request (application/x-www-form-urlencoded)

    + Headers

                    Authorization: Bearer <access_token>
+ Response 204

## Followings of a user [/user/{id}/followings]

+ Parameters
    + id: 1 (required, number) - ID of the TV show

### Followings [GET]

+ Response 200 (application/json)

    + Body

                {
                    "data": [
                        {
                            "id": 15,
                            "name": "Ahmet Yıldırım",
                            "pic": "https://graph.facebook.com/v2.10/10156326399823866/picture?type=normal"
                        },
                        {
                            "id": 59,
                            "name": "serap",
                            "pic": null
                        }
                    ]
                }


## Followers of a user [/users/{id}/followers]

+ Parameters
    + id: 1 (required, number) - ID of the TV show

### Followers [GET]

+ Response 200 (application/json)

    + Body

                {
                    "data": [
                        {
                            "id": 15,
                            "name": "Ahmet Yıldırım",
                            "pic": "https://graph.facebook.com/v2.10/10156326399823866/picture?type=normal"
                        },
                        {
                            "id": 59,
                            "name": "serap",
                            "pic": null
                        }
                    ]
                }


## Get a user's reviews [/users/{id}/review]

Get a user's reviews by user id. The response includes information about the reviewed media in "reviewable" field. Note that field names differ between movie and tv.

+ Parameters
    + id: 15 (required, number) - ID of the user

### Get reviews by user id [GET]

+ Response 200 (application/json)

        {
            "success": true,
            "data": [
                "stars": 5,
                "body": "Excellent acting by Mr Reese. Best action scenes in history. Must watch! 10/10.",
                "user": {
                    "id": 1,
                    "name": "derebaba",
                    "pic": "https://res.cloudinary.com/hsqlu5ecl/image/upload/c_fit,h_160,w_160/wqzlcicaznab0xpjk9qa.jpg"
                },
                "reviewable_id": 1411,
                "reviewable_type": "tv",
                "created_at": {
                    "date": "2018-02-28 16:27:18.000000",
                    "timezone_type": 3,
                    "timezone": "Europe/Istanbul"
                },
                "updated_at": {
                    "date": "2018-04-10 14:12:08.000000",
                    "timezone_type": 3,
                    "timezone": "Europe/Istanbul"
                }
            ],
            "message": "success"
        }

## Get a user's watchlist [/users/{id}/watchlist]

+ Parameters
    + id: 60 (required, number) - ID of the user

### Get watchlist by user ID [GET]

+ Response 200 (application/json)

    + Body

                {
                    "success": true,
                    "data": ['<first movies, then tvs in an array>'],
                    "message": "success"
                }


# Group Oauth

Authentication interface

## Get access token [/oauth/token]

Set `grant_type` to "password" to get token by credentials, `"refresh_token"` to refresh token.

### Get or refresh access token [POST]

+ Request Get access token using credentials (application/x-www-form-urlencoded)

    + Attributes
        + client_id (required, number) - Client ID
        + client_secret (required, string) - Client secret
        + grant_type (required, string) - "password"
        + username (required, string) - User's email
        + password (required, string) - User's password

+ Request Refresh token (application/x-www-form-urlencoded)

    + Attributes
        + client_id (required, number) - Client ID
        + client_secret (required, string) - Client secret
        + `grant_type` (required, string) - `"refresh_token"`
        + refresh_token (required, string)

+ Response 200 (application/json)

    + Body

                {
                    "token_type": "Bearer",
                    "expires_in": 1295997,
                    "access_token": "<accessToken>",
                    "refresh_token": "<refreshToken>"
                }

# Group Reviews

Reviews API

## News feed [/reviews/feed]

Get news feed of authenticated user. Each review also contains information about its author.

### Get news feed with token [GET]

+ Request (application/x-www-form-urlencoded)

    + Headers

                    Authorization: Bearer <access_token>

+ Response 200 (application/json)

    + Body

                {
                    "data": [
                        {
                            "id": 1,
                            "stars": 1,
                            "body": "Repellat sunt animi dicta illo voluptatem odio. Excepturi nulla officia ipsam vel aut et. Provident delectus non consequatur esse. Placeat et occaecati et ipsam ullam ab.",
                            "user_id": 17,
                            "reviewable_id": 63181,
                            "reviewable_type": "tv",
                            "created_at": {
                                "date": "2018-05-18 16:43:17.000000",
                                "timezone_type": 3,
                                "timezone": "Europe/Istanbul"
                            },
                            "updated_at": {
                                "date": "2018-05-18 16:43:17.000000",
                                "timezone_type": 3,
                                "timezone": "Europe/Istanbul"
                            },
                            "user": {
                                "data": {
                                    "id": 17,
                                    "name": "Samson Vandervort",
                                    "pic": null
                                }
                            }
                        }
                    ]
                }

# Group Movies

Movies API

## Popular movies [/movies/popular]

Get movies which are currently popular

### Get popular movies [GET]

+ Response 200 (application/json)

    + Body

                {
                    "success": true,
                    "data": [
                        {
                            "vote_count": 1386,
                            "id": 337167,
                            "video": false,
                            "vote_average": 6.0999999999999996,
                            "title": "Fifty Shades Freed",
                            "popularity": 541.50172999999995,
                            "poster_path": "/jjPJ4s3DWZZvI4vw8Xfi4Vqa1Q8.jpg",
                            "original_language": "en",
                            "original_title": "Fifty Shades Freed",
                            "genre_ids": [
                                18,
                                10749
                            ],
                            "backdrop_path": "/9ywA15OAiwjSTvg3cBs9B7kOCBF.jpg",
                            "adult": false,
                            "overview": "Believing they have left behind shadowy figures from their past, newlyweds Christian and Ana fully embrace an inextricable connection and shared life of luxury. But just as she steps into her role as Mrs. Grey and he relaxes into an unfamiliar stability, new threats could jeopardize their happy ending before it even begins.",
                            "release_date": "2018-02-07"
                        },
                        {
                            "vote_count": 6966,
                            "id": 269149,
                            "video": false,
                            "vote_average": 7.7000000000000002,
                            "title": "Zootopia",
                            "popularity": 320.55776800000001,
                            "poster_path": "/sM33SANp9z6rXW8Itn7NnG1GOEs.jpg",
                            "original_language": "en",
                            "original_title": "Zootopia",
                            "genre_ids": [
                                16,
                                12,
                                10751,
                                35
                            ],
                            "backdrop_path": "/mhdeE1yShHTaDbJVdWyTlzFvNkr.jpg",
                            "adult": false,
                            "overview": "Determined to prove herself, Officer Judy Hopps, the first bunny on Zootopia's police force, jumps at the chance to crack her first case - even if it means partnering with scam-artist fox Nick Wilde to solve the mystery.",
                            "release_date": "2016-02-11"
                        },
                        ...,
                    ],
                    "message": "success"
                }